add_rules("mode.debug", "mode.release")
set_arch("aarch64")
set_optimize("none")
set_toolset("cc", "aarch64-none-linux-gnu-gcc")
set_toolset("as", "aarch64-none-linux-gnu-gcc")
set_toolset("ld", "aarch64-none-linux-gnu-ld")

task("qemu")
    on_run(function ()
        import("core.project.project")
        local target = project.target("arm_tiny")
        local file_bin = format("%s/debug/%s.bin", target:targetdir(), target:basename())
        local file_elf = format("%s/debug/%s.elf", target:targetdir(), target:basename())
        local qemu_option = "-m 4G -M virt -cpu cortex-a72 -nographic"
        local qemu_cmd = format("qemu-system-aarch64 %s -kernel %s", qemu_option, file_elf)
        print(qemu_cmd)
        os.exec(qemu_cmd)
    end)

    set_menu {}

target("arm_tiny")
    set_kind("binary")
    add_files("src/*.c")
    add_files("asm/*.S")
    add_files("link.lds")
    add_includedirs("include")
    
    add_cflags("-Wall", "-c", "-O0", "-lc", "-g", "-fno-pie", "-fno-builtin-printf", "-mgeneral-regs-only", {force = true})
    add_asflags("-Wall", "-c", "-O0", "-lc", "-g", "-fno-pie", "-fno-builtin-printf", "-mgeneral-regs-only", {force = true})
    add_defines('VM_VERSION=\"null\"')

    set_filename("arm_tiny.elf")

    after_build(function(target)
        print("生成 BIN 文件")
        local file_elf = target:targetfile()
        local file_bin = format("%s/%s.bin", target:targetdir(), target:basename())
        local file_dis_text = format("%s/%s_dis.txt", target:targetdir(), target:basename())
        local file_elf_text = format("%s/%s_elf.txt", target:targetdir(), target:basename())
        os.run("aarch64-none-linux-gnu-objcopy -O binary %s %s", file_elf, file_bin)
        local disdata, _ = os.iorun("aarch64-none-linux-gnu-objdump -x -d -S %s", file_elf)
        io.writefile(file_dis_text, disdata)
        local elfdata, _ = os.iorun("aarch64-none-linux-gnu-readelf -a %s", file_elf)
        io.writefile(file_elf_text, elfdata)
        print("生成已完成")
    end)